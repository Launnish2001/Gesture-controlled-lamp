
spi_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004424  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005390  08005390  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005398  08005398  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080053a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000014  080053b4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  080053b4  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acdb  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3a  00000000  00000000  0002ad62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000831  00000000  00000000  0002d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218a1  00000000  00000000  0002de71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4bb  00000000  00000000  0004f712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9da5  00000000  00000000  0005dbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cc0  00000000  00000000  00127974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0012a634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080045d4 	.word	0x080045d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	080045d4 	.word	0x080045d4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b970 	b.w	8000d8c <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	460d      	mov	r5, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	460f      	mov	r7, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0xe2>
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	b143      	cbz	r3, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	f1c3 0220 	rsb	r2, r3, #32
 8000ae8:	409f      	lsls	r7, r3
 8000aea:	fa20 f202 	lsr.w	r2, r0, r2
 8000aee:	4317      	orrs	r7, r2
 8000af0:	409c      	lsls	r4, r3
 8000af2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000af6:	fa1f f58c 	uxth.w	r5, ip
 8000afa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b08:	fb01 f005 	mul.w	r0, r1, r5
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	d90a      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b10:	eb1c 0202 	adds.w	r2, ip, r2
 8000b14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b18:	f080 811c 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	f240 8119 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b22:	3902      	subs	r1, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b36:	fb00 f505 	mul.w	r5, r0, r5
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	d90a      	bls.n	8000b54 <__udivmoddi4+0x90>
 8000b3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b46:	f080 8107 	bcs.w	8000d58 <__udivmoddi4+0x294>
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	f240 8104 	bls.w	8000d58 <__udivmoddi4+0x294>
 8000b50:	4464      	add	r4, ip
 8000b52:	3802      	subs	r0, #2
 8000b54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11e      	cbz	r6, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40dc      	lsrs	r4, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	e9c6 4300 	strd	r4, r3, [r6]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0xbc>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80ed 	beq.w	8000d4e <__udivmoddi4+0x28a>
 8000b74:	2100      	movs	r1, #0
 8000b76:	e9c6 0500 	strd	r0, r5, [r6]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b80:	fab3 f183 	clz	r1, r3
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d149      	bne.n	8000c1c <__udivmoddi4+0x158>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	d302      	bcc.n	8000b92 <__udivmoddi4+0xce>
 8000b8c:	4282      	cmp	r2, r0
 8000b8e:	f200 80f8 	bhi.w	8000d82 <__udivmoddi4+0x2be>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d0e2      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ba4:	e7df      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba6:	b902      	cbnz	r2, 8000baa <__udivmoddi4+0xe6>
 8000ba8:	deff      	udf	#255	; 0xff
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8090 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc8:	0c22      	lsrs	r2, r4, #16
 8000bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bce:	fb0e f005 	mul.w	r0, lr, r5
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2b8>
 8000be6:	4645      	mov	r5, r8
 8000be8:	1a12      	subs	r2, r2, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x14e>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x14c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2c2>
 8000c10:	4610      	mov	r0, r2
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c1a:	e79f      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c1c:	f1c1 0720 	rsb	r7, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	40fd      	lsrs	r5, r7
 8000c34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	fb09 5518 	mls	r5, r9, r8, r5
 8000c46:	0c1c      	lsrs	r4, r3, #16
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	fa00 f001 	lsl.w	r0, r0, r1
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2b4>
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2b4>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4464      	add	r4, ip
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	b29d      	uxth	r5, r3
 8000c78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2ac>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2ac>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	4464      	add	r4, ip
 8000c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ca6:	eba4 040e 	sub.w	r4, r4, lr
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46ae      	mov	lr, r5
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x29c>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x298>
 8000cb4:	b156      	cbz	r6, 8000ccc <__udivmoddi4+0x208>
 8000cb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cba:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc2:	40ca      	lsrs	r2, r1
 8000cc4:	40cc      	lsrs	r4, r1
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	f1c3 0120 	rsb	r1, r3, #32
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ce4:	409d      	lsls	r5, r3
 8000ce6:	432a      	orrs	r2, r5
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf8:	0c11      	lsrs	r1, r2, #16
 8000cfa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cfe:	fb00 f50e 	mul.w	r5, r0, lr
 8000d02:	428d      	cmp	r5, r1
 8000d04:	fa04 f403 	lsl.w	r4, r4, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x258>
 8000d0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d14:	428d      	cmp	r5, r1
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4461      	add	r1, ip
 8000d1c:	1b49      	subs	r1, r1, r5
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d24:	fb07 1115 	mls	r1, r7, r5, r1
 8000d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d30:	4291      	cmp	r1, r2
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x282>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000d3e:	4291      	cmp	r1, r2
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000d42:	3d02      	subs	r5, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a52      	subs	r2, r2, r1
 8000d48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0xfc>
 8000d4e:	4631      	mov	r1, r6
 8000d50:	4630      	mov	r0, r6
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000d54:	4639      	mov	r1, r7
 8000d56:	e6e6      	b.n	8000b26 <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e6fb      	b.n	8000b54 <__udivmoddi4+0x90>
 8000d5c:	4548      	cmp	r0, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6c:	4645      	mov	r5, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d70:	462b      	mov	r3, r5
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x258>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7c:	3d02      	subs	r5, #2
 8000d7e:	4462      	add	r2, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e70a      	b.n	8000b9c <__udivmoddi4+0xd8>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x14e>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <setLED>:

#define USE_BRIGHTNESS 1
extern int brightness;

void setLED (int led, int RED, int GREEN, int BLUE)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
	LED_Data[led][0] = led;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	b2d9      	uxtb	r1, r3
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <setLED+0x58>)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[led][1] = GREEN;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	b2d9      	uxtb	r1, r3
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <setLED+0x58>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	460a      	mov	r2, r1
 8000db8:	705a      	strb	r2, [r3, #1]
	LED_Data[led][2] = RED;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	b2d9      	uxtb	r1, r3
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <setLED+0x58>)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	709a      	strb	r2, [r3, #2]
	LED_Data[led][3] = BLUE;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2d9      	uxtb	r1, r3
 8000dce:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <setLED+0x58>)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	70da      	strb	r2, [r3, #3]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000030 	.word	0x20000030

08000dec <ws2812_spi>:


// SPI
void ws2812_spi (int GREEN, int RED, int BLUE)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]

	uint32_t color = GREEN<<16 | RED<<8 | BLUE;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	041a      	lsls	r2, r3, #16
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t sendData[24];
	int indx = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i=23; i>=0; i--)
 8000e0c:	2317      	movs	r3, #23
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000e10:	e01b      	b.n	8000e4a <ws2812_spi+0x5e>
	{
		if (((color>>i)&0x01) == 1) sendData[indx++] = 0b110;  // store 1
 8000e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e16:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d008      	beq.n	8000e34 <ws2812_spi+0x48>
 8000e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	637a      	str	r2, [r7, #52]	; 0x34
 8000e28:	3338      	adds	r3, #56	; 0x38
 8000e2a:	443b      	add	r3, r7
 8000e2c:	2206      	movs	r2, #6
 8000e2e:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000e32:	e007      	b.n	8000e44 <ws2812_spi+0x58>
		else sendData[indx++] = 0b100;  // store 0
 8000e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	637a      	str	r2, [r7, #52]	; 0x34
 8000e3a:	3338      	adds	r3, #56	; 0x38
 8000e3c:	443b      	add	r3, r7
 8000e3e:	2204      	movs	r2, #4
 8000e40:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i=23; i>=0; i--)
 8000e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e46:	3b01      	subs	r3, #1
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
 8000e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dae0      	bge.n	8000e12 <ws2812_spi+0x26>
	}

	HAL_SPI_Transmit(&hspi3, sendData, 24, 1000);
 8000e50:	f107 0114 	add.w	r1, r7, #20
 8000e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e58:	2218      	movs	r2, #24
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <ws2812_spi+0x7c>)
 8000e5c:	f003 f96f 	bl	800413e <HAL_SPI_Transmit>
}
 8000e60:	bf00      	nop
 8000e62:	3738      	adds	r7, #56	; 0x38
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200000b0 	.word	0x200000b0

08000e6c <WS2812_Send>:

void WS2812_Send (void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LED; i++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	e016      	b.n	8000ea6 <WS2812_Send+0x3a>
	{
		ws2812_spi(LED_Data[i][1],LED_Data[i][2],LED_Data[i][3]);
 8000e78:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <WS2812_Send+0x50>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	4618      	mov	r0, r3
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <WS2812_Send+0x50>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	789b      	ldrb	r3, [r3, #2]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <WS2812_Send+0x50>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	78db      	ldrb	r3, [r3, #3]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f7ff ffa6 	bl	8000dec <ws2812_spi>
	for (int i=0; i<NUM_LED; i++)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b09      	cmp	r3, #9
 8000eaa:	dde5      	ble.n	8000e78 <WS2812_Send+0xc>
	}
	HAL_Delay (1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f001 fa3b 	bl	8002328 <HAL_Delay>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000030 	.word	0x20000030

08000ec0 <rainbow>:


// Rainbow [Mode :1]
uint16_t effStep = 0;

uint8_t rainbow() {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  float factor1, factor2;
  uint16_t ind;
  for(uint16_t j=0;j<10;j++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	81fb      	strh	r3, [r7, #14]
 8000eca:	e205      	b.n	80012d8 <rainbow+0x418>
    ind = (int16_t)effStep + j * 2;
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4bab      	ldr	r3, [pc, #684]	; (8001180 <rainbow+0x2c0>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	81bb      	strh	r3, [r7, #12]
    switch((int)((ind % 20) / 6.666666666666667)) {
 8000eda:	89ba      	ldrh	r2, [r7, #12]
 8000edc:	4ba9      	ldr	r3, [pc, #676]	; (8001184 <rainbow+0x2c4>)
 8000ede:	fba3 1302 	umull	r1, r3, r3, r2
 8000ee2:	0919      	lsrs	r1, r3, #4
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fadb 	bl	80004ac <__aeabi_i2d>
 8000ef6:	a3a0      	add	r3, pc, #640	; (adr r3, 8001178 <rainbow+0x2b8>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff fc6a 	bl	80007d4 <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff fd4c 	bl	80009a4 <__aeabi_d2iz>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	f000 8142 	beq.w	8001198 <rainbow+0x2d8>
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	f300 81dc 	bgt.w	80012d2 <rainbow+0x412>
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <rainbow+0x66>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f000 808a 	beq.w	8001038 <rainbow+0x178>
 8000f24:	e1d5      	b.n	80012d2 <rainbow+0x412>

      case 0: factor1 = 1.0 - ((float)(ind % 20 - 0 * 6.666666666666667) / 6.666666666666667);
 8000f26:	89ba      	ldrh	r2, [r7, #12]
 8000f28:	4b96      	ldr	r3, [pc, #600]	; (8001184 <rainbow+0x2c4>)
 8000f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f2e:	0919      	lsrs	r1, r3, #4
 8000f30:	460b      	mov	r3, r1
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fab5 	bl	80004ac <__aeabi_i2d>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fd53 	bl	80009f4 <__aeabi_d2f>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fabd 	bl	80004d0 <__aeabi_f2d>
 8000f56:	a388      	add	r3, pc, #544	; (adr r3, 8001178 <rainbow+0x2b8>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f7ff fc3a 	bl	80007d4 <__aeabi_ddiv>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	f04f 0000 	mov.w	r0, #0
 8000f68:	4987      	ldr	r1, [pc, #540]	; (8001188 <rainbow+0x2c8>)
 8000f6a:	f7ff f951 	bl	8000210 <__aeabi_dsub>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fd3d 	bl	80009f4 <__aeabi_d2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 0) % 20) / 6.666666666666667;
 8000f7e:	89ba      	ldrh	r2, [r7, #12]
 8000f80:	4b82      	ldr	r3, [pc, #520]	; (800118c <rainbow+0x2cc>)
 8000f82:	fb83 1302 	smull	r1, r3, r3, r2
 8000f86:	10d9      	asrs	r1, r3, #3
 8000f88:	17d3      	asrs	r3, r2, #31
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	1ad1      	subs	r1, r2, r3
 8000f96:	ee07 1a90 	vmov	s15, r1
 8000f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9e:	ee17 0a90 	vmov	r0, s15
 8000fa2:	f7ff fa95 	bl	80004d0 <__aeabi_f2d>
 8000fa6:	a374      	add	r3, pc, #464	; (adr r3, 8001178 <rainbow+0x2b8>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fc12 	bl	80007d4 <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fd1c 	bl	80009f4 <__aeabi_d2f>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	607b      	str	r3, [r7, #4]
              setLED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
 8000fc0:	89f8      	ldrh	r0, [r7, #14]
 8000fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001190 <rainbow+0x2d0>
 8000fca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001194 <rainbow+0x2d4>
 8000fd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000fe2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fe6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001194 <rainbow+0x2d4>
 8000fea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff2:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001190 <rainbow+0x2d0>
 8000ff6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffe:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8001002:	edd7 7a02 	vldr	s15, [r7, #8]
 8001006:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001194 <rainbow+0x2d4>
 800100a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800100e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001012:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001194 <rainbow+0x2d4>
 8001016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001022:	ee17 3a90 	vmov	r3, s15
 8001026:	ee15 2a90 	vmov	r2, s11
 800102a:	ee16 1a10 	vmov	r1, s12
 800102e:	f7ff feaf 	bl	8000d90 <setLED>
              WS2812_Send();
 8001032:	f7ff ff1b 	bl	8000e6c <WS2812_Send>

              break;
 8001036:	e14c      	b.n	80012d2 <rainbow+0x412>

      case 1: factor1 = 1.0 - ((float)(ind % 20 - 1 * 6.666666666666667) / 6.666666666666667);
 8001038:	89ba      	ldrh	r2, [r7, #12]
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <rainbow+0x2c4>)
 800103c:	fba3 1302 	umull	r1, r3, r3, r2
 8001040:	0919      	lsrs	r1, r3, #4
 8001042:	460b      	mov	r3, r1
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	b29b      	uxth	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa2c 	bl	80004ac <__aeabi_i2d>
 8001054:	a348      	add	r3, pc, #288	; (adr r3, 8001178 <rainbow+0x2b8>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff f8d9 	bl	8000210 <__aeabi_dsub>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fcc5 	bl	80009f4 <__aeabi_d2f>
 800106a:	4603      	mov	r3, r0
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa2f 	bl	80004d0 <__aeabi_f2d>
 8001072:	a341      	add	r3, pc, #260	; (adr r3, 8001178 <rainbow+0x2b8>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fbac 	bl	80007d4 <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	f04f 0000 	mov.w	r0, #0
 8001084:	4940      	ldr	r1, [pc, #256]	; (8001188 <rainbow+0x2c8>)
 8001086:	f7ff f8c3 	bl	8000210 <__aeabi_dsub>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fcaf 	bl	80009f4 <__aeabi_d2f>
 8001096:	4603      	mov	r3, r0
 8001098:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 6.666666666666667) % 20) / 6.666666666666667;
 800109a:	89bb      	ldrh	r3, [r7, #12]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa05 	bl	80004ac <__aeabi_i2d>
 80010a2:	a335      	add	r3, pc, #212	; (adr r3, 8001178 <rainbow+0x2b8>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff f8b2 	bl	8000210 <__aeabi_dsub>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fc76 	bl	80009a4 <__aeabi_d2iz>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <rainbow+0x2cc>)
 80010bc:	fb83 1302 	smull	r1, r3, r3, r2
 80010c0:	10d9      	asrs	r1, r3, #3
 80010c2:	17d3      	asrs	r3, r2, #31
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	460b      	mov	r3, r1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	1ad1      	subs	r1, r2, r3
 80010d0:	ee07 1a90 	vmov	s15, r1
 80010d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d8:	ee17 0a90 	vmov	r0, s15
 80010dc:	f7ff f9f8 	bl	80004d0 <__aeabi_f2d>
 80010e0:	a325      	add	r3, pc, #148	; (adr r3, 8001178 <rainbow+0x2b8>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fb75 	bl	80007d4 <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fc7f 	bl	80009f4 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	607b      	str	r3, [r7, #4]
              setLED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 80010fa:	89f8      	ldrh	r0, [r7, #14]
 80010fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001100:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001194 <rainbow+0x2d4>
 8001104:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001108:	edd7 7a01 	vldr	s15, [r7, #4]
 800110c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001194 <rainbow+0x2d4>
 8001110:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800111c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001120:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001190 <rainbow+0x2d0>
 8001124:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001128:	edd7 7a01 	vldr	s15, [r7, #4]
 800112c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001194 <rainbow+0x2d4>
 8001130:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 800113c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001140:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001194 <rainbow+0x2d4>
 8001144:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001148:	edd7 7a01 	vldr	s15, [r7, #4]
 800114c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001190 <rainbow+0x2d0>
 8001150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115c:	ee17 3a90 	vmov	r3, s15
 8001160:	ee15 2a90 	vmov	r2, s11
 8001164:	ee16 1a10 	vmov	r1, s12
 8001168:	f7ff fe12 	bl	8000d90 <setLED>
              WS2812_Send();
 800116c:	f7ff fe7e 	bl	8000e6c <WS2812_Send>

              break;
 8001170:	e0af      	b.n	80012d2 <rainbow+0x412>
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	aaaaaaab 	.word	0xaaaaaaab
 800117c:	401aaaaa 	.word	0x401aaaaa
 8001180:	20000058 	.word	0x20000058
 8001184:	cccccccd 	.word	0xcccccccd
 8001188:	3ff00000 	.word	0x3ff00000
 800118c:	66666667 	.word	0x66666667
 8001190:	437f0000 	.word	0x437f0000
 8001194:	00000000 	.word	0x00000000

      case 2: factor1 = 1.0 - ((float)(ind % 20 - 2 * 6.666666666666667) / 6.666666666666667);
 8001198:	89ba      	ldrh	r2, [r7, #12]
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <rainbow+0x458>)
 800119c:	fba3 1302 	umull	r1, r3, r3, r2
 80011a0:	0919      	lsrs	r1, r3, #4
 80011a2:	460b      	mov	r3, r1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f97c 	bl	80004ac <__aeabi_i2d>
 80011b4:	a354      	add	r3, pc, #336	; (adr r3, 8001308 <rainbow+0x448>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff f829 	bl	8000210 <__aeabi_dsub>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fc15 	bl	80009f4 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f97f 	bl	80004d0 <__aeabi_f2d>
 80011d2:	a34f      	add	r3, pc, #316	; (adr r3, 8001310 <rainbow+0x450>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fafc 	bl	80007d4 <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	f04f 0000 	mov.w	r0, #0
 80011e4:	494d      	ldr	r1, [pc, #308]	; (800131c <rainbow+0x45c>)
 80011e6:	f7ff f813 	bl	8000210 <__aeabi_dsub>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fbff 	bl	80009f4 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	60bb      	str	r3, [r7, #8]
              factor2 = (float)((int)(ind - 13.333333333333334) % 20) / 6.666666666666667;
 80011fa:	89bb      	ldrh	r3, [r7, #12]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f955 	bl	80004ac <__aeabi_i2d>
 8001202:	a341      	add	r3, pc, #260	; (adr r3, 8001308 <rainbow+0x448>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f802 	bl	8000210 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fbc6 	bl	80009a4 <__aeabi_d2iz>
 8001218:	4602      	mov	r2, r0
 800121a:	4b41      	ldr	r3, [pc, #260]	; (8001320 <rainbow+0x460>)
 800121c:	fb83 1302 	smull	r1, r3, r3, r2
 8001220:	10d9      	asrs	r1, r3, #3
 8001222:	17d3      	asrs	r3, r2, #31
 8001224:	1ac9      	subs	r1, r1, r3
 8001226:	460b      	mov	r3, r1
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	1ad1      	subs	r1, r2, r3
 8001230:	ee07 1a90 	vmov	s15, r1
 8001234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f948 	bl	80004d0 <__aeabi_f2d>
 8001240:	a333      	add	r3, pc, #204	; (adr r3, 8001310 <rainbow+0x450>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7ff fac5 	bl	80007d4 <__aeabi_ddiv>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fbcf 	bl	80009f4 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	607b      	str	r3, [r7, #4]
              setLED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 800125a:	89f8      	ldrh	r0, [r7, #14]
 800125c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001260:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001324 <rainbow+0x464>
 8001264:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001268:	edd7 7a01 	vldr	s15, [r7, #4]
 800126c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001328 <rainbow+0x468>
 8001270:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001278:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800127c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001280:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001324 <rainbow+0x464>
 8001284:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001288:	edd7 7a01 	vldr	s15, [r7, #4]
 800128c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001324 <rainbow+0x464>
 8001290:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 800129c:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001328 <rainbow+0x468>
 80012a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ac:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001324 <rainbow+0x464>
 80012b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012bc:	ee17 3a90 	vmov	r3, s15
 80012c0:	ee15 2a90 	vmov	r2, s11
 80012c4:	ee16 1a10 	vmov	r1, s12
 80012c8:	f7ff fd62 	bl	8000d90 <setLED>
              WS2812_Send();
 80012cc:	f7ff fdce 	bl	8000e6c <WS2812_Send>

              break;
 80012d0:	bf00      	nop
  for(uint16_t j=0;j<10;j++) {
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	3301      	adds	r3, #1
 80012d6:	81fb      	strh	r3, [r7, #14]
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	2b09      	cmp	r3, #9
 80012dc:	f67f adf6 	bls.w	8000ecc <rainbow+0xc>

    }
  }
  if(effStep >= 20) {effStep = 0; return 0x03; }
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <rainbow+0x46c>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	2b13      	cmp	r3, #19
 80012e6:	d904      	bls.n	80012f2 <rainbow+0x432>
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <rainbow+0x46c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	801a      	strh	r2, [r3, #0]
 80012ee:	2303      	movs	r3, #3
 80012f0:	e006      	b.n	8001300 <rainbow+0x440>
  else effStep++;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <rainbow+0x46c>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <rainbow+0x46c>)
 80012fc:	801a      	strh	r2, [r3, #0]
  return 0x01;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	aaaaaaab 	.word	0xaaaaaaab
 800130c:	402aaaaa 	.word	0x402aaaaa
 8001310:	aaaaaaab 	.word	0xaaaaaaab
 8001314:	401aaaaa 	.word	0x401aaaaa
 8001318:	cccccccd 	.word	0xcccccccd
 800131c:	3ff00000 	.word	0x3ff00000
 8001320:	66666667 	.word	0x66666667
 8001324:	00000000 	.word	0x00000000
 8001328:	437f0000 	.word	0x437f0000
 800132c:	20000058 	.word	0x20000058

08001330 <fade>:

// Fade [Mode:2]

unsigned long effStart;

uint8_t fade() {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0


	  for (int i=0; i<10; i++)
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e008      	b.n	800134e <fade+0x1e>
	  {
		 setLED(i, 255, 255, 0);
 800133c:	2300      	movs	r3, #0
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	21ff      	movs	r1, #255	; 0xff
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff fd24 	bl	8000d90 <setLED>
	  for (int i=0; i<10; i++)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b09      	cmp	r3, #9
 8001352:	ddf3      	ble.n	800133c <fade+0xc>
	  }

	  WS2812_Send();
 8001354:	f7ff fd8a 	bl	8000e6c <WS2812_Send>
	  HAL_Delay(600);
 8001358:	f44f 7016 	mov.w	r0, #600	; 0x258
 800135c:	f000 ffe4 	bl	8002328 <HAL_Delay>

	  for (int i=0; i<10; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	e008      	b.n	8001378 <fade+0x48>
	  {
		 setLED(i, 0, 255, 255);
 8001366:	23ff      	movs	r3, #255	; 0xff
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	2100      	movs	r1, #0
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f7ff fd0f 	bl	8000d90 <setLED>
	  for (int i=0; i<10; i++)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3301      	adds	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b09      	cmp	r3, #9
 800137c:	ddf3      	ble.n	8001366 <fade+0x36>
	  }

	  WS2812_Send();
 800137e:	f7ff fd75 	bl	8000e6c <WS2812_Send>
	  HAL_Delay(600);
 8001382:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001386:	f000 ffcf 	bl	8002328 <HAL_Delay>

	  for (int i=0; i<10; i++)
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	e008      	b.n	80013a2 <fade+0x72>
	  {
		 setLED(i, 255, 0, 255);
 8001390:	23ff      	movs	r3, #255	; 0xff
 8001392:	2200      	movs	r2, #0
 8001394:	21ff      	movs	r1, #255	; 0xff
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fcfa 	bl	8000d90 <setLED>
	  for (int i=0; i<10; i++)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3301      	adds	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	ddf3      	ble.n	8001390 <fade+0x60>
	  }

	  WS2812_Send();
 80013a8:	f7ff fd60 	bl	8000e6c <WS2812_Send>
	  HAL_Delay(600);
 80013ac:	f44f 7016 	mov.w	r0, #600	; 0x258
 80013b0:	f000 ffba 	bl	8002328 <HAL_Delay>

	  return 0x01;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <spectrum>:


// Spectrum [Mode:3]

uint8_t spectrum() {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0

	  for (int i=0; i<4; i++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00d      	b.n	80013e6 <spectrum+0x28>
	  {
		 setLED(i,0 , 255, 0);
 80013ca:	2300      	movs	r3, #0
 80013cc:	22ff      	movs	r2, #255	; 0xff
 80013ce:	2100      	movs	r1, #0
 80013d0:	6978      	ldr	r0, [r7, #20]
 80013d2:	f7ff fcdd 	bl	8000d90 <setLED>
		 HAL_Delay(35);
 80013d6:	2023      	movs	r0, #35	; 0x23
 80013d8:	f000 ffa6 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 80013dc:	f7ff fd46 	bl	8000e6c <WS2812_Send>
	  for (int i=0; i<4; i++)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	ddee      	ble.n	80013ca <spectrum+0xc>
	  }

	  for (int i=4; i>0; i--)
 80013ec:	2304      	movs	r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	e00d      	b.n	800140e <spectrum+0x50>
	  {
		 setLED(i, 0, 0, 0);
 80013f2:	2300      	movs	r3, #0
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	6938      	ldr	r0, [r7, #16]
 80013fa:	f7ff fcc9 	bl	8000d90 <setLED>
		 HAL_Delay(35);
 80013fe:	2023      	movs	r0, #35	; 0x23
 8001400:	f000 ff92 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 8001404:	f7ff fd32 	bl	8000e6c <WS2812_Send>
	  for (int i=4; i>0; i--)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	3b01      	subs	r3, #1
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	dcee      	bgt.n	80013f2 <spectrum+0x34>
	  }

	  HAL_Delay(20);
 8001414:	2014      	movs	r0, #20
 8001416:	f000 ff87 	bl	8002328 <HAL_Delay>

	  for (int i=0; i<10; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e00d      	b.n	800143c <spectrum+0x7e>
	  {
		 setLED(i,0 , 0, 255);
 8001420:	23ff      	movs	r3, #255	; 0xff
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff fcb2 	bl	8000d90 <setLED>
		 HAL_Delay(15);
 800142c:	200f      	movs	r0, #15
 800142e:	f000 ff7b 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 8001432:	f7ff fd1b 	bl	8000e6c <WS2812_Send>
	  for (int i=0; i<10; i++)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b09      	cmp	r3, #9
 8001440:	ddee      	ble.n	8001420 <spectrum+0x62>
	  }

	  for (int i=10; i>0; i--)
 8001442:	230a      	movs	r3, #10
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	e00d      	b.n	8001464 <spectrum+0xa6>
	  {
		 setLED(i, 0, 0, 0);
 8001448:	2300      	movs	r3, #0
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	68b8      	ldr	r0, [r7, #8]
 8001450:	f7ff fc9e 	bl	8000d90 <setLED>
		 HAL_Delay(15);
 8001454:	200f      	movs	r0, #15
 8001456:	f000 ff67 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 800145a:	f7ff fd07 	bl	8000e6c <WS2812_Send>
	  for (int i=10; i>0; i--)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3b01      	subs	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	dcee      	bgt.n	8001448 <spectrum+0x8a>
	  }

	  HAL_Delay(20);
 800146a:	2014      	movs	r0, #20
 800146c:	f000 ff5c 	bl	8002328 <HAL_Delay>

	  for (int i=0; i<7; i++)
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	e00d      	b.n	8001492 <spectrum+0xd4>
	  {
		 setLED(i,255 , 0, 0);
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	21ff      	movs	r1, #255	; 0xff
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fc87 	bl	8000d90 <setLED>
		 HAL_Delay(25);
 8001482:	2019      	movs	r0, #25
 8001484:	f000 ff50 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 8001488:	f7ff fcf0 	bl	8000e6c <WS2812_Send>
	  for (int i=0; i<7; i++)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3301      	adds	r3, #1
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b06      	cmp	r3, #6
 8001496:	ddee      	ble.n	8001476 <spectrum+0xb8>
	  }

	  for (int i=7; i>0; i--)
 8001498:	2307      	movs	r3, #7
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	e00d      	b.n	80014ba <spectrum+0xfc>
	  {
		 setLED(i, 0, 0, 0);
 800149e:	2300      	movs	r3, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f7ff fc73 	bl	8000d90 <setLED>
		 HAL_Delay(25);
 80014aa:	2019      	movs	r0, #25
 80014ac:	f000 ff3c 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 80014b0:	f7ff fcdc 	bl	8000e6c <WS2812_Send>
	  for (int i=7; i>0; i--)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	dcee      	bgt.n	800149e <spectrum+0xe0>
	  }

	  HAL_Delay(20);
 80014c0:	2014      	movs	r0, #20
 80014c2:	f000 ff31 	bl	8002328 <HAL_Delay>
	  return 0x01;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <rain>:
// Rain [Mode:4]
uint8_t rain() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0

	  for (int i=10; i>7; i--)
 80014d6:	230a      	movs	r3, #10
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e00d      	b.n	80014f8 <rain+0x28>
	  {
		 setLED(i, 255, 0, 0);
 80014dc:	2300      	movs	r3, #0
 80014de:	2200      	movs	r2, #0
 80014e0:	21ff      	movs	r1, #255	; 0xff
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff fc54 	bl	8000d90 <setLED>
		 HAL_Delay(35);
 80014e8:	2023      	movs	r0, #35	; 0x23
 80014ea:	f000 ff1d 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 80014ee:	f7ff fcbd 	bl	8000e6c <WS2812_Send>
	  for (int i=10; i>7; i--)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	dcee      	bgt.n	80014dc <rain+0xc>
	  }
	  HAL_Delay(100);
 80014fe:	2064      	movs	r0, #100	; 0x64
 8001500:	f000 ff12 	bl	8002328 <HAL_Delay>
	  for (int i=10; i>7; i--)
 8001504:	230a      	movs	r3, #10
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	e00d      	b.n	8001526 <rain+0x56>
	  {
		 setLED(i, 0, 0, 0);
 800150a:	2300      	movs	r3, #0
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	6938      	ldr	r0, [r7, #16]
 8001512:	f7ff fc3d 	bl	8000d90 <setLED>
		 HAL_Delay(35);
 8001516:	2023      	movs	r0, #35	; 0x23
 8001518:	f000 ff06 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 800151c:	f7ff fca6 	bl	8000e6c <WS2812_Send>
	  for (int i=10; i>7; i--)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	3b01      	subs	r3, #1
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b07      	cmp	r3, #7
 800152a:	dcee      	bgt.n	800150a <rain+0x3a>
	  }


	  for (int i=7; i>4; i--)
 800152c:	2307      	movs	r3, #7
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	e00d      	b.n	800154e <rain+0x7e>
	  {
		 setLED(i, 0, 255, 0);
 8001532:	2300      	movs	r3, #0
 8001534:	22ff      	movs	r2, #255	; 0xff
 8001536:	2100      	movs	r1, #0
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff fc29 	bl	8000d90 <setLED>
		 HAL_Delay(35);
 800153e:	2023      	movs	r0, #35	; 0x23
 8001540:	f000 fef2 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 8001544:	f7ff fc92 	bl	8000e6c <WS2812_Send>
	  for (int i=7; i>4; i--)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3b01      	subs	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b04      	cmp	r3, #4
 8001552:	dcee      	bgt.n	8001532 <rain+0x62>
	  }
	  HAL_Delay(100);
 8001554:	2064      	movs	r0, #100	; 0x64
 8001556:	f000 fee7 	bl	8002328 <HAL_Delay>
	  for (int i=7; i>4; i--)
 800155a:	2307      	movs	r3, #7
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	e00d      	b.n	800157c <rain+0xac>
	  {
		 setLED(i, 0, 0, 0);
 8001560:	2300      	movs	r3, #0
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	68b8      	ldr	r0, [r7, #8]
 8001568:	f7ff fc12 	bl	8000d90 <setLED>
		 HAL_Delay(35);
 800156c:	2023      	movs	r0, #35	; 0x23
 800156e:	f000 fedb 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 8001572:	f7ff fc7b 	bl	8000e6c <WS2812_Send>
	  for (int i=7; i>4; i--)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b04      	cmp	r3, #4
 8001580:	dcee      	bgt.n	8001560 <rain+0x90>
	  }


	  for (int i=4; i>0; i--)
 8001582:	2304      	movs	r3, #4
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	e00d      	b.n	80015a4 <rain+0xd4>
	  {
		 setLED(i, 0, 0,255);
 8001588:	23ff      	movs	r3, #255	; 0xff
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fbfe 	bl	8000d90 <setLED>
		 HAL_Delay(35);
 8001594:	2023      	movs	r0, #35	; 0x23
 8001596:	f000 fec7 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 800159a:	f7ff fc67 	bl	8000e6c <WS2812_Send>
	  for (int i=4; i>0; i--)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dcee      	bgt.n	8001588 <rain+0xb8>
	  }
	  HAL_Delay(100);
 80015aa:	2064      	movs	r0, #100	; 0x64
 80015ac:	f000 febc 	bl	8002328 <HAL_Delay>
	  for (int i=4; i>0; i--)
 80015b0:	2304      	movs	r3, #4
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	e00d      	b.n	80015d2 <rain+0x102>
	  {
		 setLED(i, 0, 0, 0);
 80015b6:	2300      	movs	r3, #0
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f7ff fbe7 	bl	8000d90 <setLED>
		 HAL_Delay(35);
 80015c2:	2023      	movs	r0, #35	; 0x23
 80015c4:	f000 feb0 	bl	8002328 <HAL_Delay>
		 #undef NUM_LED
		 #define NUM_LED i
		 WS2812_Send();
 80015c8:	f7ff fc50 	bl	8000e6c <WS2812_Send>
	  for (int i=4; i>0; i--)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	dcee      	bgt.n	80015b6 <rain+0xe6>
	  }

	return 0x01;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <off>:

uint8_t off()
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
	for (int i=0; i<10; i++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	e00a      	b.n	8001604 <off+0x22>
	{
		 setLED(i, 0, 0, 0);
 80015ee:	2300      	movs	r3, #0
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fbcb 	bl	8000d90 <setLED>
		 WS2812_Send();
 80015fa:	f7ff fc37 	bl	8000e6c <WS2812_Send>
	for (int i=0; i<10; i++)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b09      	cmp	r3, #9
 8001608:	ddf1      	ble.n	80015ee <off+0xc>
	}
	return 0x01;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <led>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led(int var)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

	switch (var)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	2b03      	cmp	r3, #3
 8001622:	d817      	bhi.n	8001654 <led+0x40>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <led+0x18>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	08001643 	.word	0x08001643
 8001634:	08001649 	.word	0x08001649
 8001638:	0800164f 	.word	0x0800164f
	{
	case 1:
		rainbow();
 800163c:	f7ff fc40 	bl	8000ec0 <rainbow>
		break;
 8001640:	e00b      	b.n	800165a <led+0x46>
	case 2:
		spectrum();
 8001642:	f7ff febc 	bl	80013be <spectrum>
		break;
 8001646:	e008      	b.n	800165a <led+0x46>
	case 3:
		fade();
 8001648:	f7ff fe72 	bl	8001330 <fade>
		break;
 800164c:	e005      	b.n	800165a <led+0x46>
	case 4:
		rain();
 800164e:	f7ff ff3f 	bl	80014d0 <rain>
		break;
 8001652:	e002      	b.n	800165a <led+0x46>

	default:
		off();
 8001654:	f7ff ffc5 	bl	80015e2 <off>
		break;
 8001658:	bf00      	nop

	}
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop

08001664 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	  UNUSED(GPIO_Pin);
	  /* NOTE: This function Should not be modified, when the callback is needed,
			   the HAL_GPIO_EXTI_Callback could be implemented in the user file
	   */
	  if (GPIO_Pin == Sensor1_Pin)
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001674:	d10c      	bne.n	8001690 <HAL_GPIO_EXTI_Callback+0x2c>
	  {
		  mode++;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_GPIO_EXTI_Callback+0x38>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_GPIO_EXTI_Callback+0x38>)
 8001680:	701a      	strb	r2, [r3, #0]

		  if (mode > 4){mode = 0;}
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_GPIO_EXTI_Callback+0x38>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b04      	cmp	r3, #4
 8001688:	d902      	bls.n	8001690 <HAL_GPIO_EXTI_Callback+0x2c>
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <HAL_GPIO_EXTI_Callback+0x38>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]

	  }
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	20000108 	.word	0x20000108

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a4:	f000 fdce 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a8:	f000 f892 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ac:	f000 f962 	bl	8001974 <MX_GPIO_Init>
  MX_SPI3_Init();
 80016b0:	f000 f928 	bl	8001904 <MX_SPI3_Init>
  MX_I2C1_Init();
 80016b4:	f000 f8f8 	bl	80018a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize Display
  SSD1306_Init();
 80016b8:	f000 f9b6 	bl	8001a28 <SSD1306_Init>
  SSD1306_GotoXY(50,20);
 80016bc:	2114      	movs	r1, #20
 80016be:	2032      	movs	r0, #50	; 0x32
 80016c0:	f000 fb1c 	bl	8001cfc <SSD1306_GotoXY>
  SSD1306_Puts ("IEEE", &Font_11x18, 1);
 80016c4:	2201      	movs	r2, #1
 80016c6:	493a      	ldr	r1, [pc, #232]	; (80017b0 <main+0x110>)
 80016c8:	483a      	ldr	r0, [pc, #232]	; (80017b4 <main+0x114>)
 80016ca:	f000 fbad 	bl	8001e28 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80016ce:	f000 fa6f 	bl	8001bb0 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 80016d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d6:	f000 fe27 	bl	8002328 <HAL_Delay>
  SSD1306_Clear();
 80016da:	f000 fbca 	bl	8001e72 <SSD1306_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(mode == 0)
 80016de:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <main+0x118>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d110      	bne.n	8001708 <main+0x68>
	  {
		  SSD1306_Clear();
 80016e6:	f000 fbc4 	bl	8001e72 <SSD1306_Clear>
		  SSD1306_GotoXY(50,20);
 80016ea:	2114      	movs	r1, #20
 80016ec:	2032      	movs	r0, #50	; 0x32
 80016ee:	f000 fb05 	bl	8001cfc <SSD1306_GotoXY>
		  SSD1306_Puts ("Off", &Font_11x18, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	492e      	ldr	r1, [pc, #184]	; (80017b0 <main+0x110>)
 80016f6:	4831      	ldr	r0, [pc, #196]	; (80017bc <main+0x11c>)
 80016f8:	f000 fb96 	bl	8001e28 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80016fc:	f000 fa58 	bl	8001bb0 <SSD1306_UpdateScreen>
		  led(0);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff ff87 	bl	8001614 <led>
 8001706:	e7ea      	b.n	80016de <main+0x3e>
	  }else if(mode == 1)
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <main+0x118>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d110      	bne.n	8001732 <main+0x92>
	  {
		  SSD1306_Clear();
 8001710:	f000 fbaf 	bl	8001e72 <SSD1306_Clear>
		  SSD1306_GotoXY(30,20);
 8001714:	2114      	movs	r1, #20
 8001716:	201e      	movs	r0, #30
 8001718:	f000 faf0 	bl	8001cfc <SSD1306_GotoXY>
		  SSD1306_Puts ("Rainbow", &Font_11x18, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	4924      	ldr	r1, [pc, #144]	; (80017b0 <main+0x110>)
 8001720:	4827      	ldr	r0, [pc, #156]	; (80017c0 <main+0x120>)
 8001722:	f000 fb81 	bl	8001e28 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001726:	f000 fa43 	bl	8001bb0 <SSD1306_UpdateScreen>
		  led(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff ff72 	bl	8001614 <led>
 8001730:	e7d5      	b.n	80016de <main+0x3e>
	  }else if(mode == 2)
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <main+0x118>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d110      	bne.n	800175c <main+0xbc>
	  {
		  SSD1306_Clear();
 800173a:	f000 fb9a 	bl	8001e72 <SSD1306_Clear>
		  SSD1306_GotoXY(30,20);
 800173e:	2114      	movs	r1, #20
 8001740:	201e      	movs	r0, #30
 8001742:	f000 fadb 	bl	8001cfc <SSD1306_GotoXY>
		  SSD1306_Puts ("Spectrum", &Font_11x18, 1);
 8001746:	2201      	movs	r2, #1
 8001748:	4919      	ldr	r1, [pc, #100]	; (80017b0 <main+0x110>)
 800174a:	481e      	ldr	r0, [pc, #120]	; (80017c4 <main+0x124>)
 800174c:	f000 fb6c 	bl	8001e28 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001750:	f000 fa2e 	bl	8001bb0 <SSD1306_UpdateScreen>
		  led(2);
 8001754:	2002      	movs	r0, #2
 8001756:	f7ff ff5d 	bl	8001614 <led>
 800175a:	e7c0      	b.n	80016de <main+0x3e>
	  }else if(mode == 3)
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <main+0x118>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d110      	bne.n	8001786 <main+0xe6>
	  {
		  SSD1306_Clear();
 8001764:	f000 fb85 	bl	8001e72 <SSD1306_Clear>
		  SSD1306_GotoXY(30,20);
 8001768:	2114      	movs	r1, #20
 800176a:	201e      	movs	r0, #30
 800176c:	f000 fac6 	bl	8001cfc <SSD1306_GotoXY>
		  SSD1306_Puts ("Fade", &Font_11x18, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	490f      	ldr	r1, [pc, #60]	; (80017b0 <main+0x110>)
 8001774:	4814      	ldr	r0, [pc, #80]	; (80017c8 <main+0x128>)
 8001776:	f000 fb57 	bl	8001e28 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800177a:	f000 fa19 	bl	8001bb0 <SSD1306_UpdateScreen>
		  led(3);
 800177e:	2003      	movs	r0, #3
 8001780:	f7ff ff48 	bl	8001614 <led>
 8001784:	e7ab      	b.n	80016de <main+0x3e>
	  }
	  else if(mode == 4)
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <main+0x118>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b04      	cmp	r3, #4
 800178c:	d1a7      	bne.n	80016de <main+0x3e>
	  {
		  SSD1306_Clear();
 800178e:	f000 fb70 	bl	8001e72 <SSD1306_Clear>
		  SSD1306_GotoXY(30,20);
 8001792:	2114      	movs	r1, #20
 8001794:	201e      	movs	r0, #30
 8001796:	f000 fab1 	bl	8001cfc <SSD1306_GotoXY>
		  SSD1306_Puts ("Rain", &Font_11x18, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <main+0x110>)
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <main+0x12c>)
 80017a0:	f000 fb42 	bl	8001e28 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80017a4:	f000 fa04 	bl	8001bb0 <SSD1306_UpdateScreen>
		  led(4);
 80017a8:	2004      	movs	r0, #4
 80017aa:	f7ff ff33 	bl	8001614 <led>
	  if(mode == 0)
 80017ae:	e796      	b.n	80016de <main+0x3e>
 80017b0:	20000000 	.word	0x20000000
 80017b4:	080045ec 	.word	0x080045ec
 80017b8:	20000108 	.word	0x20000108
 80017bc:	080045f4 	.word	0x080045f4
 80017c0:	080045f8 	.word	0x080045f8
 80017c4:	08004600 	.word	0x08004600
 80017c8:	0800460c 	.word	0x0800460c
 80017cc:	08004614 	.word	0x08004614

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	; 0x50
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	2234      	movs	r2, #52	; 0x34
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fecc 	bl	800457c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <SystemClock_Config+0xd0>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <SystemClock_Config+0xd0>)
 80017fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <SystemClock_Config+0xd0>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <SystemClock_Config+0xd4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a22      	ldr	r2, [pc, #136]	; (80018a4 <SystemClock_Config+0xd4>)
 800181a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <SystemClock_Config+0xd4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182c:	2302      	movs	r3, #2
 800182e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001834:	2310      	movs	r3, #16
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2302      	movs	r3, #2
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001840:	2308      	movs	r3, #8
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001844:	23a0      	movs	r3, #160	; 0xa0
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001848:	2302      	movs	r3, #2
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800184c:	2302      	movs	r3, #2
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001850:	2302      	movs	r3, #2
 8001852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4618      	mov	r0, r3
 800185a:	f002 f949 	bl	8003af0 <HAL_RCC_OscConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001864:	f000 f8da 	bl	8001a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001868:	230f      	movs	r3, #15
 800186a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186c:	2302      	movs	r3, #2
 800186e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001874:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	2105      	movs	r1, #5
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fdfc 	bl	8003484 <HAL_RCC_ClockConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001892:	f000 f8c3 	bl	8001a1c <Error_Handler>
  }
}
 8001896:	bf00      	nop
 8001898:	3750      	adds	r7, #80	; 0x50
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000

080018a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <MX_I2C1_Init+0x54>)
 80018b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_I2C1_Init+0x58>)
 80018b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_I2C1_Init+0x50>)
 80018e6:	f001 f801 	bl	80028ec <HAL_I2C_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f0:	f000 f894 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000005c 	.word	0x2000005c
 80018fc:	40005400 	.word	0x40005400
 8001900:	00061a80 	.word	0x00061a80

08001904 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_SPI3_Init+0x68>)
 800190a:	4a19      	ldr	r2, [pc, #100]	; (8001970 <MX_SPI3_Init+0x6c>)
 800190c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_SPI3_Init+0x68>)
 8001910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001914:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_SPI3_Init+0x68>)
 8001918:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800191c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_SPI3_Init+0x68>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_SPI3_Init+0x68>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <MX_SPI3_Init+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_SPI3_Init+0x68>)
 8001932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001936:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_SPI3_Init+0x68>)
 800193a:	2218      	movs	r2, #24
 800193c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_SPI3_Init+0x68>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_SPI3_Init+0x68>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_SPI3_Init+0x68>)
 800194c:	2200      	movs	r2, #0
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_SPI3_Init+0x68>)
 8001952:	220a      	movs	r2, #10
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_SPI3_Init+0x68>)
 8001958:	f002 fb68 	bl	800402c <HAL_SPI_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001962:	f000 f85b 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200000b0 	.word	0x200000b0
 8001970:	40003c00 	.word	0x40003c00

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <MX_GPIO_Init+0xa0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <MX_GPIO_Init+0xa0>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <MX_GPIO_Init+0xa0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_GPIO_Init+0xa0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <MX_GPIO_Init+0xa0>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <MX_GPIO_Init+0xa0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_GPIO_Init+0xa0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <MX_GPIO_Init+0xa0>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_GPIO_Init+0xa0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Sensor1_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin;
 80019de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Sensor1_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	4619      	mov	r1, r3
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <MX_GPIO_Init+0xa4>)
 80019f6:	f000 fdcd 	bl	8002594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2017      	movs	r0, #23
 8001a00:	f000 fd91 	bl	8002526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a04:	2017      	movs	r0, #23
 8001a06:	f000 fdaa 	bl	800255e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020800 	.word	0x40020800

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <Error_Handler+0x8>
	...

08001a28 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a2e:	f000 fa29 	bl	8001e84 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001a32:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a36:	2201      	movs	r2, #1
 8001a38:	2178      	movs	r1, #120	; 0x78
 8001a3a:	485b      	ldr	r0, [pc, #364]	; (8001ba8 <SSD1306_Init+0x180>)
 8001a3c:	f001 f998 	bl	8002d70 <HAL_I2C_IsDeviceReady>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e0a9      	b.n	8001b9e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001a4a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a4e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a50:	e002      	b.n	8001a58 <SSD1306_Init+0x30>
		p--;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a5e:	22ae      	movs	r2, #174	; 0xae
 8001a60:	2100      	movs	r1, #0
 8001a62:	2078      	movs	r0, #120	; 0x78
 8001a64:	f000 fa8a 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001a68:	2220      	movs	r2, #32
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2078      	movs	r0, #120	; 0x78
 8001a6e:	f000 fa85 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a72:	2210      	movs	r2, #16
 8001a74:	2100      	movs	r1, #0
 8001a76:	2078      	movs	r0, #120	; 0x78
 8001a78:	f000 fa80 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a7c:	22b0      	movs	r2, #176	; 0xb0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2078      	movs	r0, #120	; 0x78
 8001a82:	f000 fa7b 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a86:	22c8      	movs	r2, #200	; 0xc8
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2078      	movs	r0, #120	; 0x78
 8001a8c:	f000 fa76 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2078      	movs	r0, #120	; 0x78
 8001a96:	f000 fa71 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2078      	movs	r0, #120	; 0x78
 8001aa0:	f000 fa6c 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001aa4:	2240      	movs	r2, #64	; 0x40
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2078      	movs	r0, #120	; 0x78
 8001aaa:	f000 fa67 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001aae:	2281      	movs	r2, #129	; 0x81
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2078      	movs	r0, #120	; 0x78
 8001ab4:	f000 fa62 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001ab8:	22ff      	movs	r2, #255	; 0xff
 8001aba:	2100      	movs	r1, #0
 8001abc:	2078      	movs	r0, #120	; 0x78
 8001abe:	f000 fa5d 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001ac2:	22a1      	movs	r2, #161	; 0xa1
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2078      	movs	r0, #120	; 0x78
 8001ac8:	f000 fa58 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001acc:	22a6      	movs	r2, #166	; 0xa6
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2078      	movs	r0, #120	; 0x78
 8001ad2:	f000 fa53 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001ad6:	22a8      	movs	r2, #168	; 0xa8
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2078      	movs	r0, #120	; 0x78
 8001adc:	f000 fa4e 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ae0:	223f      	movs	r2, #63	; 0x3f
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2078      	movs	r0, #120	; 0x78
 8001ae6:	f000 fa49 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aea:	22a4      	movs	r2, #164	; 0xa4
 8001aec:	2100      	movs	r1, #0
 8001aee:	2078      	movs	r0, #120	; 0x78
 8001af0:	f000 fa44 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001af4:	22d3      	movs	r2, #211	; 0xd3
 8001af6:	2100      	movs	r1, #0
 8001af8:	2078      	movs	r0, #120	; 0x78
 8001afa:	f000 fa3f 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2078      	movs	r0, #120	; 0x78
 8001b04:	f000 fa3a 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b08:	22d5      	movs	r2, #213	; 0xd5
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2078      	movs	r0, #120	; 0x78
 8001b0e:	f000 fa35 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b12:	22f0      	movs	r2, #240	; 0xf0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2078      	movs	r0, #120	; 0x78
 8001b18:	f000 fa30 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b1c:	22d9      	movs	r2, #217	; 0xd9
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2078      	movs	r0, #120	; 0x78
 8001b22:	f000 fa2b 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b26:	2222      	movs	r2, #34	; 0x22
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2078      	movs	r0, #120	; 0x78
 8001b2c:	f000 fa26 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001b30:	22da      	movs	r2, #218	; 0xda
 8001b32:	2100      	movs	r1, #0
 8001b34:	2078      	movs	r0, #120	; 0x78
 8001b36:	f000 fa21 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b3a:	2212      	movs	r2, #18
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2078      	movs	r0, #120	; 0x78
 8001b40:	f000 fa1c 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b44:	22db      	movs	r2, #219	; 0xdb
 8001b46:	2100      	movs	r1, #0
 8001b48:	2078      	movs	r0, #120	; 0x78
 8001b4a:	f000 fa17 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b4e:	2220      	movs	r2, #32
 8001b50:	2100      	movs	r1, #0
 8001b52:	2078      	movs	r0, #120	; 0x78
 8001b54:	f000 fa12 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b58:	228d      	movs	r2, #141	; 0x8d
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2078      	movs	r0, #120	; 0x78
 8001b5e:	f000 fa0d 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b62:	2214      	movs	r2, #20
 8001b64:	2100      	movs	r1, #0
 8001b66:	2078      	movs	r0, #120	; 0x78
 8001b68:	f000 fa08 	bl	8001f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b6c:	22af      	movs	r2, #175	; 0xaf
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2078      	movs	r0, #120	; 0x78
 8001b72:	f000 fa03 	bl	8001f7c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b76:	222e      	movs	r2, #46	; 0x2e
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2078      	movs	r0, #120	; 0x78
 8001b7c:	f000 f9fe 	bl	8001f7c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f000 f843 	bl	8001c0c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001b86:	f000 f813 	bl	8001bb0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <SSD1306_Init+0x184>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <SSD1306_Init+0x184>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SSD1306_Init+0x184>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000005c 	.word	0x2000005c
 8001bac:	2000050c 	.word	0x2000050c

08001bb0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	e01d      	b.n	8001bf8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	3b50      	subs	r3, #80	; 0x50
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2078      	movs	r0, #120	; 0x78
 8001bc8:	f000 f9d8 	bl	8001f7c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2078      	movs	r0, #120	; 0x78
 8001bd2:	f000 f9d3 	bl	8001f7c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2078      	movs	r0, #120	; 0x78
 8001bdc:	f000 f9ce 	bl	8001f7c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	01db      	lsls	r3, r3, #7
 8001be4:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <SSD1306_UpdateScreen+0x58>)
 8001be6:	441a      	add	r2, r3
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	2140      	movs	r1, #64	; 0x40
 8001bec:	2078      	movs	r0, #120	; 0x78
 8001bee:	f000 f95f 	bl	8001eb0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	71fb      	strb	r3, [r7, #7]
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	2b07      	cmp	r3, #7
 8001bfc:	d9de      	bls.n	8001bbc <SSD1306_UpdateScreen+0xc>
	}
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000010c 	.word	0x2000010c

08001c0c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <SSD1306_Fill+0x14>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <SSD1306_Fill+0x16>
 8001c20:	23ff      	movs	r3, #255	; 0xff
 8001c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c26:	4619      	mov	r1, r3
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <SSD1306_Fill+0x2c>)
 8001c2a:	f002 fca7 	bl	800457c <memset>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000010c 	.word	0x2000010c

08001c3c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
 8001c46:	460b      	mov	r3, r1
 8001c48:	80bb      	strh	r3, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	70fb      	strb	r3, [r7, #3]
	if (
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	2b7f      	cmp	r3, #127	; 0x7f
 8001c52:	d848      	bhi.n	8001ce6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001c54:	88bb      	ldrh	r3, [r7, #4]
 8001c56:	2b3f      	cmp	r3, #63	; 0x3f
 8001c58:	d845      	bhi.n	8001ce6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <SSD1306_DrawPixel+0xb8>)
 8001c5c:	791b      	ldrb	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d11a      	bne.n	8001cac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	b298      	uxth	r0, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	01db      	lsls	r3, r3, #7
 8001c82:	4413      	add	r3, r2
 8001c84:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <SSD1306_DrawPixel+0xbc>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	b25a      	sxtb	r2, r3
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b259      	sxtb	r1, r3
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	01db      	lsls	r3, r3, #7
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b2c9      	uxtb	r1, r1
 8001ca6:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <SSD1306_DrawPixel+0xbc>)
 8001ca8:	54d1      	strb	r1, [r2, r3]
 8001caa:	e01d      	b.n	8001ce8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	88bb      	ldrh	r3, [r7, #4]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	b298      	uxth	r0, r3
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	01db      	lsls	r3, r3, #7
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <SSD1306_DrawPixel+0xbc>)
 8001cbc:	5cd3      	ldrb	r3, [r2, r3]
 8001cbe:	b25a      	sxtb	r2, r3
 8001cc0:	88bb      	ldrh	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	b259      	sxtb	r1, r3
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	4603      	mov	r3, r0
 8001cda:	01db      	lsls	r3, r3, #7
 8001cdc:	4413      	add	r3, r2
 8001cde:	b2c9      	uxtb	r1, r1
 8001ce0:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <SSD1306_DrawPixel+0xbc>)
 8001ce2:	54d1      	strb	r1, [r2, r3]
 8001ce4:	e000      	b.n	8001ce8 <SSD1306_DrawPixel+0xac>
		return;
 8001ce6:	bf00      	nop
	}
}
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	2000050c 	.word	0x2000050c
 8001cf8:	2000010c 	.word	0x2000010c

08001cfc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	460a      	mov	r2, r1
 8001d06:	80fb      	strh	r3, [r7, #6]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001d0c:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <SSD1306_GotoXY+0x28>)
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <SSD1306_GotoXY+0x28>)
 8001d14:	88bb      	ldrh	r3, [r7, #4]
 8001d16:	8053      	strh	r3, [r2, #2]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	2000050c 	.word	0x2000050c

08001d28 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <SSD1306_Putc+0xfc>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
	if (
 8001d44:	2b7f      	cmp	r3, #127	; 0x7f
 8001d46:	dc07      	bgt.n	8001d58 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d48:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <SSD1306_Putc+0xfc>)
 8001d4a:	885b      	ldrh	r3, [r3, #2]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	785b      	ldrb	r3, [r3, #1]
 8001d52:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d54:	2b3f      	cmp	r3, #63	; 0x3f
 8001d56:	dd01      	ble.n	8001d5c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e05e      	b.n	8001e1a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e04b      	b.n	8001dfa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	3b20      	subs	r3, #32
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	7849      	ldrb	r1, [r1, #1]
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	440b      	add	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	e030      	b.n	8001de8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d010      	beq.n	8001db8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <SSD1306_Putc+0xfc>)
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	b298      	uxth	r0, r3
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <SSD1306_Putc+0xfc>)
 8001da4:	885a      	ldrh	r2, [r3, #2]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	79ba      	ldrb	r2, [r7, #6]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7ff ff43 	bl	8001c3c <SSD1306_DrawPixel>
 8001db6:	e014      	b.n	8001de2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <SSD1306_Putc+0xfc>)
 8001dba:	881a      	ldrh	r2, [r3, #0]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b298      	uxth	r0, r3
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <SSD1306_Putc+0xfc>)
 8001dc6:	885a      	ldrh	r2, [r3, #2]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	b299      	uxth	r1, r3
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f7ff ff2d 	bl	8001c3c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	3301      	adds	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d3c8      	bcc.n	8001d86 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d3ad      	bcc.n	8001d62 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <SSD1306_Putc+0xfc>)
 8001e08:	881a      	ldrh	r2, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <SSD1306_Putc+0xfc>)
 8001e16:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001e18:	79fb      	ldrb	r3, [r7, #7]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000050c 	.word	0x2000050c

08001e28 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	4613      	mov	r3, r2
 8001e34:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001e36:	e012      	b.n	8001e5e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	79fa      	ldrb	r2, [r7, #7]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff71 	bl	8001d28 <SSD1306_Putc>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d002      	beq.n	8001e58 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	e008      	b.n	8001e6a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1e8      	bne.n	8001e38 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	781b      	ldrb	r3, [r3, #0]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7ff fec8 	bl	8001c0c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001e7c:	f7ff fe98 	bl	8001bb0 <SSD1306_UpdateScreen>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <ssd1306_I2C_Init+0x28>)
 8001e8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e8e:	e002      	b.n	8001e96 <ssd1306_I2C_Init+0x12>
		p--;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f9      	bne.n	8001e90 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	0003d090 	.word	0x0003d090

08001eb0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b0c7      	sub	sp, #284	; 0x11c
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	4608      	mov	r0, r1
 8001eba:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001ebe:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001ec2:	600a      	str	r2, [r1, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001eca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001ece:	4622      	mov	r2, r4
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ed6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001eda:	4602      	mov	r2, r0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ee2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ee6:	460a      	mov	r2, r1
 8001ee8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001eea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ef2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ef6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f04:	e015      	b.n	8001f32 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001f06:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f0a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f0e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	441a      	add	r2, r3
 8001f16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	7811      	ldrb	r1, [r2, #0]
 8001f1e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f22:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001f26:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001f28:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f3c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001f40:	8812      	ldrh	r2, [r2, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d8df      	bhi.n	8001f06 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f4a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b299      	uxth	r1, r3
 8001f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f107 020c 	add.w	r2, r7, #12
 8001f64:	200a      	movs	r0, #10
 8001f66:	9000      	str	r0, [sp, #0]
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <ssd1306_I2C_WriteMulti+0xc8>)
 8001f6a:	f000 fe03 	bl	8002b74 <HAL_I2C_Master_Transmit>
}
 8001f6e:	bf00      	nop
 8001f70:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	2000005c 	.word	0x2000005c

08001f7c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
 8001f86:	460b      	mov	r3, r1
 8001f88:	71bb      	strb	r3, [r7, #6]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
 8001f90:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f92:	797b      	ldrb	r3, [r7, #5]
 8001f94:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	b299      	uxth	r1, r3
 8001f9a:	f107 020c 	add.w	r2, r7, #12
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <ssd1306_I2C_Write+0x38>)
 8001fa6:	f000 fde5 	bl	8002b74 <HAL_I2C_Master_Transmit>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000005c 	.word	0x2000005c

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_MspInit+0x4c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <HAL_MspInit+0x4c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_MspInit+0x4c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_MspInit+0x4c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_MspInit+0x4c>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_MspInit+0x4c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ff6:	2007      	movs	r0, #7
 8001ff8:	f000 fa8a 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_I2C_MspInit+0x84>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d12c      	bne.n	8002084 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_I2C_MspInit+0x88>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_I2C_MspInit+0x88>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_I2C_MspInit+0x88>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002046:	f44f 7340 	mov.w	r3, #768	; 0x300
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204c:	2312      	movs	r3, #18
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002058:	2304      	movs	r3, #4
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <HAL_I2C_MspInit+0x8c>)
 8002064:	f000 fa96 	bl	8002594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_I2C_MspInit+0x88>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_I2C_MspInit+0x88>)
 8002072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002076:	6413      	str	r3, [r2, #64]	; 0x40
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_I2C_MspInit+0x88>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40005400 	.word	0x40005400
 8002090:	40023800 	.word	0x40023800
 8002094:	40020400 	.word	0x40020400

08002098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a28      	ldr	r2, [pc, #160]	; (8002158 <HAL_SPI_MspInit+0xc0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d14a      	bne.n	8002150 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a26      	ldr	r2, [pc, #152]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a1f      	ldr	r2, [pc, #124]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_SPI_MspInit+0xc4>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_SPI_MspInit+0xc4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB0     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800211e:	2307      	movs	r3, #7
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	480d      	ldr	r0, [pc, #52]	; (8002160 <HAL_SPI_MspInit+0xc8>)
 800212a:	f000 fa33 	bl	8002594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002140:	2306      	movs	r3, #6
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <HAL_SPI_MspInit+0xcc>)
 800214c:	f000 fa22 	bl	8002594 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40003c00 	.word	0x40003c00
 800215c:	40023800 	.word	0x40023800
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 f898 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sensor1_Pin);
 80021c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021c4:	f000 fb7a 	bl	80028bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021f4:	f7ff ffea 	bl	80021cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	; (8002230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	; (800223c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800221e:	f002 f9b5 	bl	800458c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7ff fa3d 	bl	80016a0 <main>
  bx  lr    
 8002226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002234:	080053a0 	.word	0x080053a0
  ldr r2, =_sbss
 8002238:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800223c:	20000518 	.word	0x20000518

08002240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_Init+0x40>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_Init+0x40>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_Init+0x40>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 f94f 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fe9e 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f967 	bl	800257a <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 f92f 	bl	8002526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000008 	.word	0x20000008
 80022e0:	20000010 	.word	0x20000010
 80022e4:	2000000c 	.word	0x2000000c

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000010 	.word	0x20000010
 800230c:	20000514 	.word	0x20000514

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000514 	.word	0x20000514

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000010 	.word	0x20000010

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024dc:	d301      	bcc.n	80024e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024de:	2301      	movs	r3, #1
 80024e0:	e00f      	b.n	8002502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <SysTick_Config+0x40>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ea:	210f      	movs	r1, #15
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f7ff ff8e 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SysTick_Config+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <SysTick_Config+0x40>)
 80024fc:	2207      	movs	r2, #7
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff29 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002538:	f7ff ff3e 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 800253c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	6978      	ldr	r0, [r7, #20]
 8002544:	f7ff ff8e 	bl	8002464 <NVIC_EncodePriority>
 8002548:	4602      	mov	r2, r0
 800254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff5d 	bl	8002410 <__NVIC_SetPriority>
}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff31 	bl	80023d4 <__NVIC_EnableIRQ>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffa2 	bl	80024cc <SysTick_Config>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	e165      	b.n	800287c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f040 8154 	bne.w	8002876 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d005      	beq.n	80025e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d130      	bne.n	8002648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 0201 	and.w	r2, r3, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b03      	cmp	r3, #3
 8002652:	d017      	beq.n	8002684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d123      	bne.n	80026d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	08da      	lsrs	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3208      	adds	r2, #8
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80ae 	beq.w	8002876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <HAL_GPIO_Init+0x300>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a5c      	ldr	r2, [pc, #368]	; (8002894 <HAL_GPIO_Init+0x300>)
 8002724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <HAL_GPIO_Init+0x300>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_GPIO_Init+0x304>)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4f      	ldr	r2, [pc, #316]	; (800289c <HAL_GPIO_Init+0x308>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d025      	beq.n	80027ae <HAL_GPIO_Init+0x21a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4e      	ldr	r2, [pc, #312]	; (80028a0 <HAL_GPIO_Init+0x30c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01f      	beq.n	80027aa <HAL_GPIO_Init+0x216>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4d      	ldr	r2, [pc, #308]	; (80028a4 <HAL_GPIO_Init+0x310>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d019      	beq.n	80027a6 <HAL_GPIO_Init+0x212>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <HAL_GPIO_Init+0x314>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_GPIO_Init+0x20e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_GPIO_Init+0x318>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00d      	beq.n	800279e <HAL_GPIO_Init+0x20a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_GPIO_Init+0x31c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <HAL_GPIO_Init+0x206>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a49      	ldr	r2, [pc, #292]	; (80028b4 <HAL_GPIO_Init+0x320>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_GPIO_Init+0x202>
 8002792:	2306      	movs	r3, #6
 8002794:	e00c      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 8002796:	2307      	movs	r3, #7
 8002798:	e00a      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 800279a:	2305      	movs	r3, #5
 800279c:	e008      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 800279e:	2304      	movs	r3, #4
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e004      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027ae:	2300      	movs	r3, #0
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	f002 0203 	and.w	r2, r2, #3
 80027b6:	0092      	lsls	r2, r2, #2
 80027b8:	4093      	lsls	r3, r2
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c0:	4935      	ldr	r1, [pc, #212]	; (8002898 <HAL_GPIO_Init+0x304>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ce:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_GPIO_Init+0x324>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f2:	4a31      	ldr	r2, [pc, #196]	; (80028b8 <HAL_GPIO_Init+0x324>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f8:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_GPIO_Init+0x324>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800281c:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <HAL_GPIO_Init+0x324>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_GPIO_Init+0x324>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_GPIO_Init+0x324>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_GPIO_Init+0x324>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002870:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_GPIO_Init+0x324>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	f67f ae96 	bls.w	80025b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40013800 	.word	0x40013800
 800289c:	40020000 	.word	0x40020000
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40020800 	.word	0x40020800
 80028a8:	40020c00 	.word	0x40020c00
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40021400 	.word	0x40021400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fec2 	bl	8001664 <HAL_GPIO_EXTI_Callback>
  }
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e12b      	b.n	8002b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fb78 	bl	8002008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	; 0x24
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800294e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002950:	f000 fe8a 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8002954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4a81      	ldr	r2, [pc, #516]	; (8002b60 <HAL_I2C_Init+0x274>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d807      	bhi.n	8002970 <HAL_I2C_Init+0x84>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a80      	ldr	r2, [pc, #512]	; (8002b64 <HAL_I2C_Init+0x278>)
 8002964:	4293      	cmp	r3, r2
 8002966:	bf94      	ite	ls
 8002968:	2301      	movls	r3, #1
 800296a:	2300      	movhi	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e006      	b.n	800297e <HAL_I2C_Init+0x92>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a7d      	ldr	r2, [pc, #500]	; (8002b68 <HAL_I2C_Init+0x27c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	bf94      	ite	ls
 8002978:	2301      	movls	r3, #1
 800297a:	2300      	movhi	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0e7      	b.n	8002b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a78      	ldr	r2, [pc, #480]	; (8002b6c <HAL_I2C_Init+0x280>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0c9b      	lsrs	r3, r3, #18
 8002990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a6a      	ldr	r2, [pc, #424]	; (8002b60 <HAL_I2C_Init+0x274>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d802      	bhi.n	80029c0 <HAL_I2C_Init+0xd4>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3301      	adds	r3, #1
 80029be:	e009      	b.n	80029d4 <HAL_I2C_Init+0xe8>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <HAL_I2C_Init+0x284>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	3301      	adds	r3, #1
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	430b      	orrs	r3, r1
 80029da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	495c      	ldr	r1, [pc, #368]	; (8002b60 <HAL_I2C_Init+0x274>)
 80029f0:	428b      	cmp	r3, r1
 80029f2:	d819      	bhi.n	8002a28 <HAL_I2C_Init+0x13c>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e59      	subs	r1, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a08:	400b      	ands	r3, r1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_I2C_Init+0x138>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e59      	subs	r1, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a22:	e051      	b.n	8002ac8 <HAL_I2C_Init+0x1dc>
 8002a24:	2304      	movs	r3, #4
 8002a26:	e04f      	b.n	8002ac8 <HAL_I2C_Init+0x1dc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d111      	bne.n	8002a54 <HAL_I2C_Init+0x168>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1e58      	subs	r0, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	440b      	add	r3, r1
 8002a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e012      	b.n	8002a7a <HAL_I2C_Init+0x18e>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1e58      	subs	r0, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	0099      	lsls	r1, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Init+0x196>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e022      	b.n	8002ac8 <HAL_I2C_Init+0x1dc>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10e      	bne.n	8002aa8 <HAL_I2C_Init+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1e58      	subs	r0, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	440b      	add	r3, r1
 8002a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa6:	e00f      	b.n	8002ac8 <HAL_I2C_Init+0x1dc>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	0099      	lsls	r1, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	6809      	ldr	r1, [r1, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6911      	ldr	r1, [r2, #16]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68d2      	ldr	r2, [r2, #12]
 8002b02:	4311      	orrs	r1, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	000186a0 	.word	0x000186a0
 8002b64:	001e847f 	.word	0x001e847f
 8002b68:	003d08ff 	.word	0x003d08ff
 8002b6c:	431bde83 	.word	0x431bde83
 8002b70:	10624dd3 	.word	0x10624dd3

08002b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	817b      	strh	r3, [r7, #10]
 8002b84:	4613      	mov	r3, r2
 8002b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b88:	f7ff fbc2 	bl	8002310 <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	f040 80e0 	bne.w	8002d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2319      	movs	r3, #25
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4970      	ldr	r1, [pc, #448]	; (8002d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fa92 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0d3      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_I2C_Master_Transmit+0x50>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0cc      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d007      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2221      	movs	r2, #33	; 0x21
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2210      	movs	r2, #16
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	893a      	ldrh	r2, [r7, #8]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a50      	ldr	r2, [pc, #320]	; (8002d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c2c:	8979      	ldrh	r1, [r7, #10]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f9ca 	bl	8002fcc <I2C_MasterRequestWrite>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e08d      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c58:	e066      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fb50 	bl	8003304 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d107      	bne.n	8002c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06b      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d11b      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x188>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d017      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	6a39      	ldr	r1, [r7, #32]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fb47 	bl	8003394 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d107      	bne.n	8002d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e01a      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d194      	bne.n	8002c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	00100002 	.word	0x00100002
 8002d6c:	ffff0000 	.word	0xffff0000

08002d70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff fac6 	bl	8002310 <HAL_GetTick>
 8002d84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	f040 8111 	bne.w	8002fba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2319      	movs	r3, #25
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4988      	ldr	r1, [pc, #544]	; (8002fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f994 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	e104      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2C_IsDeviceReady+0x50>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0fd      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d007      	beq.n	8002de6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2224      	movs	r2, #36	; 0x24
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a70      	ldr	r2, [pc, #448]	; (8002fc8 <HAL_I2C_IsDeviceReady+0x258>)
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f952 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e40:	d103      	bne.n	8002e4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0b6      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7ff fa57 	bl	8002310 <HAL_GetTick>
 8002e62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e92:	e025      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e94:	f7ff fa3c 	bl	8002310 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d302      	bcc.n	8002eaa <HAL_I2C_IsDeviceReady+0x13a>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	22a0      	movs	r2, #160	; 0xa0
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2ba0      	cmp	r3, #160	; 0xa0
 8002eea:	d005      	beq.n	8002ef8 <HAL_I2C_IsDeviceReady+0x188>
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <HAL_I2C_IsDeviceReady+0x188>
 8002ef2:	7dbb      	ldrb	r3, [r7, #22]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0cd      	beq.n	8002e94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d129      	bne.n	8002f62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2319      	movs	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4921      	ldr	r1, [pc, #132]	; (8002fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f8c6 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e036      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e02c      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2319      	movs	r3, #25
 8002f82:	2201      	movs	r2, #1
 8002f84:	490f      	ldr	r1, [pc, #60]	; (8002fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8a2 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e012      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f4ff af32 	bcc.w	8002e0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	00100002 	.word	0x00100002
 8002fc8:	ffff0000 	.word	0xffff0000

08002fcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d006      	beq.n	8002ff6 <I2C_MasterRequestWrite+0x2a>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d003      	beq.n	8002ff6 <I2C_MasterRequestWrite+0x2a>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ff4:	d108      	bne.n	8003008 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e00b      	b.n	8003020 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	2b12      	cmp	r3, #18
 800300e:	d107      	bne.n	8003020 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f84f 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00d      	beq.n	8003054 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003046:	d103      	bne.n	8003050 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e035      	b.n	80030c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800305c:	d108      	bne.n	8003070 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800305e:	897b      	ldrh	r3, [r7, #10]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800306c:	611a      	str	r2, [r3, #16]
 800306e:	e01b      	b.n	80030a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003070:	897b      	ldrh	r3, [r7, #10]
 8003072:	11db      	asrs	r3, r3, #7
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 0306 	and.w	r3, r3, #6
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f063 030f 	orn	r3, r3, #15
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <I2C_MasterRequestWrite+0xfc>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f898 	bl	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e010      	b.n	80030c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4907      	ldr	r1, [pc, #28]	; (80030cc <I2C_MasterRequestWrite+0x100>)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f888 	bl	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	00010008 	.word	0x00010008
 80030cc:	00010002 	.word	0x00010002

080030d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e0:	e048      	b.n	8003174 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d044      	beq.n	8003174 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7ff f911 	bl	8002310 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d139      	bne.n	8003174 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	0c1b      	lsrs	r3, r3, #16
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d10d      	bne.n	8003126 <I2C_WaitOnFlagUntilTimeout+0x56>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	43da      	mvns	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4013      	ands	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	e00c      	b.n	8003140 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	43da      	mvns	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4013      	ands	r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	429a      	cmp	r2, r3
 8003144:	d116      	bne.n	8003174 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e023      	b.n	80031bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	0c1b      	lsrs	r3, r3, #16
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d10d      	bne.n	800319a <I2C_WaitOnFlagUntilTimeout+0xca>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	43da      	mvns	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4013      	ands	r3, r2
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	e00c      	b.n	80031b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	43da      	mvns	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d093      	beq.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d2:	e071      	b.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e2:	d123      	bne.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0204 	orr.w	r2, r3, #4
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e067      	b.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d041      	beq.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003234:	f7ff f86c 	bl	8002310 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d302      	bcc.n	800324a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d136      	bne.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10c      	bne.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4013      	ands	r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	e00b      	b.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	43da      	mvns	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e021      	b.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d10c      	bne.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e00b      	b.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf14      	ite	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	2300      	moveq	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f47f af6d 	bne.w	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003310:	e034      	b.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f886 	bl	8003424 <I2C_IsAcknowledgeFailed>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e034      	b.n	800338c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d028      	beq.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fff1 	bl	8002310 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d11d      	bne.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	2b80      	cmp	r3, #128	; 0x80
 800334c:	d016      	beq.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	2b80      	cmp	r3, #128	; 0x80
 8003388:	d1c3      	bne.n	8003312 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a0:	e034      	b.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f83e 	bl	8003424 <I2C_IsAcknowledgeFailed>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e034      	b.n	800341c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d028      	beq.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe ffa9 	bl	8002310 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11d      	bne.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d016      	beq.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e007      	b.n	800341c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b04      	cmp	r3, #4
 8003418:	d1c3      	bne.n	80033a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343a:	d11b      	bne.n	8003474 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003444:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0cc      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b68      	ldr	r3, [pc, #416]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d90c      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b65      	ldr	r3, [pc, #404]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b8      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d8:	4b59      	ldr	r3, [pc, #356]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f0:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a52      	ldr	r2, [pc, #328]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b50      	ldr	r3, [pc, #320]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	494d      	ldr	r1, [pc, #308]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d044      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d119      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d003      	beq.n	8003542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	2b03      	cmp	r3, #3
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e067      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4934      	ldr	r1, [pc, #208]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003574:	f7fe fecc 	bl	8002310 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fe fec8 	bl	8002310 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e04f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20c      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e032      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4916      	ldr	r1, [pc, #88]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	490e      	ldr	r1, [pc, #56]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800360a:	f000 f841 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	490a      	ldr	r1, [pc, #40]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	5ccb      	ldrb	r3, [r1, r3]
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fe2c 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023c00 	.word	0x40023c00
 8003640:	40023800 	.word	0x40023800
 8003644:	08005378 	.word	0x08005378
 8003648:	20000008 	.word	0x20000008
 800364c:	2000000c 	.word	0x2000000c

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <HAL_RCC_GetHCLKFreq+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000008 	.word	0x20000008

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800366c:	f7ff fff0 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0a9b      	lsrs	r3, r3, #10
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	; (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	08005388 	.word	0x08005388

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003694:	b0ae      	sub	sp, #184	; 0xb8
 8003696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b6:	4bcb      	ldr	r3, [pc, #812]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	f200 8206 	bhi.w	8003ad0 <HAL_RCC_GetSysClockFreq+0x440>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	08003701 	.word	0x08003701
 80036d0:	08003ad1 	.word	0x08003ad1
 80036d4:	08003ad1 	.word	0x08003ad1
 80036d8:	08003ad1 	.word	0x08003ad1
 80036dc:	08003709 	.word	0x08003709
 80036e0:	08003ad1 	.word	0x08003ad1
 80036e4:	08003ad1 	.word	0x08003ad1
 80036e8:	08003ad1 	.word	0x08003ad1
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003ad1 	.word	0x08003ad1
 80036f4:	08003ad1 	.word	0x08003ad1
 80036f8:	08003ad1 	.word	0x08003ad1
 80036fc:	08003901 	.word	0x08003901
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003700:	4bb9      	ldr	r3, [pc, #740]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003706:	e1e7      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003708:	4bb8      	ldr	r3, [pc, #736]	; (80039ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800370a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800370e:	e1e3      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003710:	4bb4      	ldr	r3, [pc, #720]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371c:	4bb1      	ldr	r3, [pc, #708]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d071      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003728:	4bae      	ldr	r3, [pc, #696]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	2200      	movs	r2, #0
 8003730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003734:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800373c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800374a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800374e:	4622      	mov	r2, r4
 8003750:	462b      	mov	r3, r5
 8003752:	f04f 0000 	mov.w	r0, #0
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	0159      	lsls	r1, r3, #5
 800375c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003760:	0150      	lsls	r0, r2, #5
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4621      	mov	r1, r4
 8003768:	1a51      	subs	r1, r2, r1
 800376a:	6439      	str	r1, [r7, #64]	; 0x40
 800376c:	4629      	mov	r1, r5
 800376e:	eb63 0301 	sbc.w	r3, r3, r1
 8003772:	647b      	str	r3, [r7, #68]	; 0x44
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003780:	4649      	mov	r1, r9
 8003782:	018b      	lsls	r3, r1, #6
 8003784:	4641      	mov	r1, r8
 8003786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800378a:	4641      	mov	r1, r8
 800378c:	018a      	lsls	r2, r1, #6
 800378e:	4641      	mov	r1, r8
 8003790:	1a51      	subs	r1, r2, r1
 8003792:	63b9      	str	r1, [r7, #56]	; 0x38
 8003794:	4649      	mov	r1, r9
 8003796:	eb63 0301 	sbc.w	r3, r3, r1
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80037a8:	4649      	mov	r1, r9
 80037aa:	00cb      	lsls	r3, r1, #3
 80037ac:	4641      	mov	r1, r8
 80037ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b2:	4641      	mov	r1, r8
 80037b4:	00ca      	lsls	r2, r1, #3
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	4622      	mov	r2, r4
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30
 80037c2:	462b      	mov	r3, r5
 80037c4:	460a      	mov	r2, r1
 80037c6:	eb42 0303 	adc.w	r3, r2, r3
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037d8:	4629      	mov	r1, r5
 80037da:	024b      	lsls	r3, r1, #9
 80037dc:	4621      	mov	r1, r4
 80037de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037e2:	4621      	mov	r1, r4
 80037e4:	024a      	lsls	r2, r1, #9
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80037fc:	f7fd f94a 	bl	8000a94 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4613      	mov	r3, r2
 8003806:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800380a:	e067      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380c:	4b75      	ldr	r3, [pc, #468]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003818:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800381c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003824:	67bb      	str	r3, [r7, #120]	; 0x78
 8003826:	2300      	movs	r3, #0
 8003828:	67fb      	str	r3, [r7, #124]	; 0x7c
 800382a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800382e:	4622      	mov	r2, r4
 8003830:	462b      	mov	r3, r5
 8003832:	f04f 0000 	mov.w	r0, #0
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003840:	0150      	lsls	r0, r2, #5
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4621      	mov	r1, r4
 8003848:	1a51      	subs	r1, r2, r1
 800384a:	62b9      	str	r1, [r7, #40]	; 0x28
 800384c:	4629      	mov	r1, r5
 800384e:	eb63 0301 	sbc.w	r3, r3, r1
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003860:	4649      	mov	r1, r9
 8003862:	018b      	lsls	r3, r1, #6
 8003864:	4641      	mov	r1, r8
 8003866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800386a:	4641      	mov	r1, r8
 800386c:	018a      	lsls	r2, r1, #6
 800386e:	4641      	mov	r1, r8
 8003870:	ebb2 0a01 	subs.w	sl, r2, r1
 8003874:	4649      	mov	r1, r9
 8003876:	eb63 0b01 	sbc.w	fp, r3, r1
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003886:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800388a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800388e:	4692      	mov	sl, r2
 8003890:	469b      	mov	fp, r3
 8003892:	4623      	mov	r3, r4
 8003894:	eb1a 0303 	adds.w	r3, sl, r3
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	462b      	mov	r3, r5
 800389c:	eb4b 0303 	adc.w	r3, fp, r3
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80038ae:	4629      	mov	r1, r5
 80038b0:	028b      	lsls	r3, r1, #10
 80038b2:	4621      	mov	r1, r4
 80038b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b8:	4621      	mov	r1, r4
 80038ba:	028a      	lsls	r2, r1, #10
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038c4:	2200      	movs	r2, #0
 80038c6:	673b      	str	r3, [r7, #112]	; 0x70
 80038c8:	677a      	str	r2, [r7, #116]	; 0x74
 80038ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80038ce:	f7fd f8e1 	bl	8000a94 <__aeabi_uldivmod>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4613      	mov	r3, r2
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038dc:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	3301      	adds	r3, #1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80038ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038fe:	e0eb      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003900:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390c:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d06b      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003918:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	2200      	movs	r2, #0
 8003920:	66bb      	str	r3, [r7, #104]	; 0x68
 8003922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392a:	663b      	str	r3, [r7, #96]	; 0x60
 800392c:	2300      	movs	r3, #0
 800392e:	667b      	str	r3, [r7, #100]	; 0x64
 8003930:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003934:	4622      	mov	r2, r4
 8003936:	462b      	mov	r3, r5
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003946:	0150      	lsls	r0, r2, #5
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4621      	mov	r1, r4
 800394e:	1a51      	subs	r1, r2, r1
 8003950:	61b9      	str	r1, [r7, #24]
 8003952:	4629      	mov	r1, r5
 8003954:	eb63 0301 	sbc.w	r3, r3, r1
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003966:	4659      	mov	r1, fp
 8003968:	018b      	lsls	r3, r1, #6
 800396a:	4651      	mov	r1, sl
 800396c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003970:	4651      	mov	r1, sl
 8003972:	018a      	lsls	r2, r1, #6
 8003974:	4651      	mov	r1, sl
 8003976:	ebb2 0801 	subs.w	r8, r2, r1
 800397a:	4659      	mov	r1, fp
 800397c:	eb63 0901 	sbc.w	r9, r3, r1
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003990:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003994:	4690      	mov	r8, r2
 8003996:	4699      	mov	r9, r3
 8003998:	4623      	mov	r3, r4
 800399a:	eb18 0303 	adds.w	r3, r8, r3
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	462b      	mov	r3, r5
 80039a2:	eb49 0303 	adc.w	r3, r9, r3
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039b4:	4629      	mov	r1, r5
 80039b6:	024b      	lsls	r3, r1, #9
 80039b8:	4621      	mov	r1, r4
 80039ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039be:	4621      	mov	r1, r4
 80039c0:	024a      	lsls	r2, r1, #9
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039ca:	2200      	movs	r2, #0
 80039cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039d4:	f7fd f85e 	bl	8000a94 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e2:	e065      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x420>
 80039e4:	40023800 	.word	0x40023800
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f0:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x458>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	099b      	lsrs	r3, r3, #6
 80039f6:	2200      	movs	r2, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	4611      	mov	r1, r2
 80039fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a00:	653b      	str	r3, [r7, #80]	; 0x50
 8003a02:	2300      	movs	r3, #0
 8003a04:	657b      	str	r3, [r7, #84]	; 0x54
 8003a06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a0a:	4642      	mov	r2, r8
 8003a0c:	464b      	mov	r3, r9
 8003a0e:	f04f 0000 	mov.w	r0, #0
 8003a12:	f04f 0100 	mov.w	r1, #0
 8003a16:	0159      	lsls	r1, r3, #5
 8003a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a1c:	0150      	lsls	r0, r2, #5
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4641      	mov	r1, r8
 8003a24:	1a51      	subs	r1, r2, r1
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	4649      	mov	r1, r9
 8003a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a3c:	4659      	mov	r1, fp
 8003a3e:	018b      	lsls	r3, r1, #6
 8003a40:	4651      	mov	r1, sl
 8003a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a46:	4651      	mov	r1, sl
 8003a48:	018a      	lsls	r2, r1, #6
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	1a54      	subs	r4, r2, r1
 8003a4e:	4659      	mov	r1, fp
 8003a50:	eb63 0501 	sbc.w	r5, r3, r1
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	00eb      	lsls	r3, r5, #3
 8003a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a62:	00e2      	lsls	r2, r4, #3
 8003a64:	4614      	mov	r4, r2
 8003a66:	461d      	mov	r5, r3
 8003a68:	4643      	mov	r3, r8
 8003a6a:	18e3      	adds	r3, r4, r3
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	464b      	mov	r3, r9
 8003a70:	eb45 0303 	adc.w	r3, r5, r3
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a82:	4629      	mov	r1, r5
 8003a84:	028b      	lsls	r3, r1, #10
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	028a      	lsls	r2, r1, #10
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a98:	2200      	movs	r2, #0
 8003a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aa2:	f7fc fff7 	bl	8000a94 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4613      	mov	r3, r2
 8003aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0f1b      	lsrs	r3, r3, #28
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003abe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ace:	e003      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_GetSysClockFreq+0x45c>)
 8003ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ad6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	37b8      	adds	r7, #184	; 0xb8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	00f42400 	.word	0x00f42400

08003af0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e28d      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8083 	beq.w	8003c16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b10:	4b94      	ldr	r3, [pc, #592]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d019      	beq.n	8003b50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b1c:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b28:	4b8e      	ldr	r3, [pc, #568]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b34:	d00c      	beq.n	8003b50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b36:	4b8b      	ldr	r3, [pc, #556]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	d112      	bne.n	8003b68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b42:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4e:	d10b      	bne.n	8003b68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	4b84      	ldr	r3, [pc, #528]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d05b      	beq.n	8003c14 <HAL_RCC_OscConfig+0x124>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d157      	bne.n	8003c14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e25a      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d106      	bne.n	8003b80 <HAL_RCC_OscConfig+0x90>
 8003b72:	4b7c      	ldr	r3, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7b      	ldr	r2, [pc, #492]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e01d      	b.n	8003bbc <HAL_RCC_OscConfig+0xcc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xb4>
 8003b8a:	4b76      	ldr	r3, [pc, #472]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a75      	ldr	r2, [pc, #468]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a72      	ldr	r2, [pc, #456]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0xcc>
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6b      	ldr	r2, [pc, #428]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fba4 	bl	8002310 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fba0 	bl	8002310 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e21f      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0xdc>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe fb90 	bl	8002310 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fb8c 	bl	8002310 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e20b      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	4b57      	ldr	r3, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x104>
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06f      	beq.n	8003d02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c22:	4b50      	ldr	r3, [pc, #320]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d017      	beq.n	8003c5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c2e:	4b4d      	ldr	r3, [pc, #308]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b47      	ldr	r3, [pc, #284]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d11c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c52:	4b44      	ldr	r3, [pc, #272]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_RCC_OscConfig+0x186>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1d3      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b3b      	ldr	r3, [pc, #236]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4937      	ldr	r1, [pc, #220]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8a:	e03a      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c94:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <HAL_RCC_OscConfig+0x278>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9a:	f7fe fb39 	bl	8002310 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fb35 	bl	8002310 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e1b4      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4925      	ldr	r1, [pc, #148]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]
 8003cd4:	e015      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCC_OscConfig+0x278>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fb18 	bl	8002310 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fe fb14 	bl	8002310 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e193      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d036      	beq.n	8003d7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d016      	beq.n	8003d44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fe faf8 	bl	8002310 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d24:	f7fe faf4 	bl	8002310 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e173      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCC_OscConfig+0x274>)
 8003d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x234>
 8003d42:	e01b      	b.n	8003d7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_RCC_OscConfig+0x27c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fe fae1 	bl	8002310 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	e00e      	b.n	8003d70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d52:	f7fe fadd 	bl	8002310 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d907      	bls.n	8003d70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e15c      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	42470000 	.word	0x42470000
 8003d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b8a      	ldr	r3, [pc, #552]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ea      	bne.n	8003d52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8097 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b83      	ldr	r3, [pc, #524]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	4b7f      	ldr	r3, [pc, #508]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4a7e      	ldr	r2, [pc, #504]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
 8003daa:	4b7c      	ldr	r3, [pc, #496]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b79      	ldr	r3, [pc, #484]	; (8003fa0 <HAL_RCC_OscConfig+0x4b0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d118      	bne.n	8003df8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc6:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCC_OscConfig+0x4b0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a75      	ldr	r2, [pc, #468]	; (8003fa0 <HAL_RCC_OscConfig+0x4b0>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fa9d 	bl	8002310 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fe fa99 	bl	8002310 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e118      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <HAL_RCC_OscConfig+0x4b0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x31e>
 8003e00:	4b66      	ldr	r3, [pc, #408]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4a65      	ldr	r2, [pc, #404]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0c:	e01c      	b.n	8003e48 <HAL_RCC_OscConfig+0x358>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x340>
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a60      	ldr	r2, [pc, #384]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	4b5e      	ldr	r3, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a5d      	ldr	r2, [pc, #372]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0x358>
 8003e30:	4b5a      	ldr	r3, [pc, #360]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a59      	ldr	r2, [pc, #356]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	4b57      	ldr	r3, [pc, #348]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	4a56      	ldr	r2, [pc, #344]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fe fa5e 	bl	8002310 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fe fa5a 	bl	8002310 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0d7      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6e:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ee      	beq.n	8003e58 <HAL_RCC_OscConfig+0x368>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fa48 	bl	8002310 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e82:	e00a      	b.n	8003e9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7fe fa44 	bl	8002310 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0c1      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9a:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ee      	bne.n	8003e84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	4a3a      	ldr	r2, [pc, #232]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80ad 	beq.w	800401c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec2:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d060      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d145      	bne.n	8003f62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <HAL_RCC_OscConfig+0x4b4>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe fa18 	bl	8002310 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe fa14 	bl	8002310 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e093      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	071b      	lsls	r3, r3, #28
 8003f2e:	491b      	ldr	r1, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x4b4>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fe f9e9 	bl	8002310 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fe f9e5 	bl	8002310 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e064      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x452>
 8003f60:	e05c      	b.n	800401c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_OscConfig+0x4b4>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fe f9d2 	bl	8002310 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe f9ce 	bl	8002310 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e04d      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x4ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x480>
 8003f8e:	e045      	b.n	800401c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e040      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_RCC_OscConfig+0x538>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d030      	beq.n	8004018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d129      	bne.n	8004018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d122      	bne.n	8004018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd8:	4013      	ands	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d119      	bne.n	8004018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d10f      	bne.n	8004018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07b      	b.n	8004136 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d108      	bne.n	8004058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404e:	d009      	beq.n	8004064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	61da      	str	r2, [r3, #28]
 8004056:	e005      	b.n	8004064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe f80a 	bl	8002098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0104 	and.w	r1, r3, #4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0210 	and.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004124:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b088      	sub	sp, #32
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_SPI_Transmit+0x22>
 800415c:	2302      	movs	r3, #2
 800415e:	e12d      	b.n	80043bc <HAL_SPI_Transmit+0x27e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004168:	f7fe f8d2 	bl	8002310 <HAL_GetTick>
 800416c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d002      	beq.n	8004184 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800417e:	2302      	movs	r3, #2
 8004180:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004182:	e116      	b.n	80043b2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Transmit+0x52>
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004194:	e10d      	b.n	80043b2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2203      	movs	r2, #3
 800419a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	88fa      	ldrh	r2, [r7, #6]
 80041ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041dc:	d10f      	bne.n	80041fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d007      	beq.n	800421c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004224:	d14f      	bne.n	80042c6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_SPI_Transmit+0xf6>
 800422e:	8afb      	ldrh	r3, [r7, #22]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d142      	bne.n	80042ba <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	881a      	ldrh	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	1c9a      	adds	r2, r3, #2
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004258:	e02f      	b.n	80042ba <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b02      	cmp	r3, #2
 8004266:	d112      	bne.n	800428e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	881a      	ldrh	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	1c9a      	adds	r2, r3, #2
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	86da      	strh	r2, [r3, #54]	; 0x36
 800428c:	e015      	b.n	80042ba <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800428e:	f7fe f83f 	bl	8002310 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d803      	bhi.n	80042a6 <HAL_SPI_Transmit+0x168>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d102      	bne.n	80042ac <HAL_SPI_Transmit+0x16e>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042b8:	e07b      	b.n	80043b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ca      	bne.n	800425a <HAL_SPI_Transmit+0x11c>
 80042c4:	e050      	b.n	8004368 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_SPI_Transmit+0x196>
 80042ce:	8afb      	ldrh	r3, [r7, #22]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d144      	bne.n	800435e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042fa:	e030      	b.n	800435e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d113      	bne.n	8004332 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004330:	e015      	b.n	800435e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004332:	f7fd ffed 	bl	8002310 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d803      	bhi.n	800434a <HAL_SPI_Transmit+0x20c>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d102      	bne.n	8004350 <HAL_SPI_Transmit+0x212>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800435c:	e029      	b.n	80043b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1c9      	bne.n	80042fc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	6839      	ldr	r1, [r7, #0]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f8b1 	bl	80044d4 <SPI_EndRxTxTransaction>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e003      	b.n	80043b2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043d4:	f7fd ff9c 	bl	8002310 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043e4:	f7fd ff94 	bl	8002310 <HAL_GetTick>
 80043e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	015b      	lsls	r3, r3, #5
 80043f0:	0d1b      	lsrs	r3, r3, #20
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fa:	e054      	b.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d050      	beq.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004404:	f7fd ff84 	bl	8002310 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	429a      	cmp	r2, r3
 8004412:	d902      	bls.n	800441a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d13d      	bne.n	8004496 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004432:	d111      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443c:	d004      	beq.n	8004448 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d107      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004460:	d10f      	bne.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e017      	b.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d19b      	bne.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000008 	.word	0x20000008

080044d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2201      	movs	r2, #1
 80044e8:	2102      	movs	r1, #2
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff ff6a 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e032      	b.n	800456c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <SPI_EndRxTxTransaction+0xa0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <SPI_EndRxTxTransaction+0xa4>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	0d5b      	lsrs	r3, r3, #21
 8004512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004524:	d112      	bne.n	800454c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff ff47 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d016      	beq.n	800456a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e00f      	b.n	800456c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	3b01      	subs	r3, #1
 8004556:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d0f2      	beq.n	800454c <SPI_EndRxTxTransaction+0x78>
 8004566:	e000      	b.n	800456a <SPI_EndRxTxTransaction+0x96>
        break;
 8004568:	bf00      	nop
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000008 	.word	0x20000008
 8004578:	165e9f81 	.word	0x165e9f81

0800457c <memset>:
 800457c:	4402      	add	r2, r0
 800457e:	4603      	mov	r3, r0
 8004580:	4293      	cmp	r3, r2
 8004582:	d100      	bne.n	8004586 <memset+0xa>
 8004584:	4770      	bx	lr
 8004586:	f803 1b01 	strb.w	r1, [r3], #1
 800458a:	e7f9      	b.n	8004580 <memset+0x4>

0800458c <__libc_init_array>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	4d0d      	ldr	r5, [pc, #52]	; (80045c4 <__libc_init_array+0x38>)
 8004590:	4c0d      	ldr	r4, [pc, #52]	; (80045c8 <__libc_init_array+0x3c>)
 8004592:	1b64      	subs	r4, r4, r5
 8004594:	10a4      	asrs	r4, r4, #2
 8004596:	2600      	movs	r6, #0
 8004598:	42a6      	cmp	r6, r4
 800459a:	d109      	bne.n	80045b0 <__libc_init_array+0x24>
 800459c:	4d0b      	ldr	r5, [pc, #44]	; (80045cc <__libc_init_array+0x40>)
 800459e:	4c0c      	ldr	r4, [pc, #48]	; (80045d0 <__libc_init_array+0x44>)
 80045a0:	f000 f818 	bl	80045d4 <_init>
 80045a4:	1b64      	subs	r4, r4, r5
 80045a6:	10a4      	asrs	r4, r4, #2
 80045a8:	2600      	movs	r6, #0
 80045aa:	42a6      	cmp	r6, r4
 80045ac:	d105      	bne.n	80045ba <__libc_init_array+0x2e>
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b4:	4798      	blx	r3
 80045b6:	3601      	adds	r6, #1
 80045b8:	e7ee      	b.n	8004598 <__libc_init_array+0xc>
 80045ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80045be:	4798      	blx	r3
 80045c0:	3601      	adds	r6, #1
 80045c2:	e7f2      	b.n	80045aa <__libc_init_array+0x1e>
 80045c4:	08005398 	.word	0x08005398
 80045c8:	08005398 	.word	0x08005398
 80045cc:	08005398 	.word	0x08005398
 80045d0:	0800539c 	.word	0x0800539c

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
